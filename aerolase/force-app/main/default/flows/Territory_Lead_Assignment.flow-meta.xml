<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>56.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <decisions>
        <name>CheckSecondaryLeadSource</name>
        <label>CheckSecondaryLeadSource</label>
        <locationX>569</locationX>
        <locationY>311</locationY>
        <defaultConnector>
            <targetReference>Get_ZipCode_Territory</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>contains_Kelly_Hermans_or_Kyle_Farr_or_Savanna_Boda</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Second_Lead_Source__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Kelly Hermans</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Second_Lead_Source__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Kyle Farr</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Second_Lead_Source__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Savanna Boda</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getUser</targetReference>
            </connector>
            <label>contains Kelly Hermans or Kyle Farr or Savanna Boda</label>
        </rules>
    </decisions>
    <decisions>
        <name>DoesCityTerritoryExist</name>
        <label>DoesCityTerritoryExist?</label>
        <locationX>545</locationX>
        <locationY>791</locationY>
        <defaultConnector>
            <targetReference>Get_State_Territory</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>CityTerritoryExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetCityTerritory.City__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.City</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetCityTerritory.City__c</leftValueReference>
                <operator>NotEqualTo</operator>
            </conditions>
            <connector>
                <targetReference>AssignCityOwner</targetReference>
            </connector>
            <label>CityTerritoryExists</label>
        </rules>
    </decisions>
    <decisions>
        <name>DoesCountryTerritoryExist</name>
        <label>DoesCountryTerritoryExist?</label>
        <locationX>974</locationX>
        <locationY>1271</locationY>
        <defaultConnector>
            <targetReference>AssignToDylan</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>CountryTerritoryExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetCountryTerritory.Country__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.Country</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetCountryTerritory.Country__c</leftValueReference>
                <operator>NotEqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>GetCountryTerritory.StateProvince__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetCountryTerritory.Zip_Code__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetCountryTerritory.City__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AssignCountryOwner</targetReference>
            </connector>
            <label>CountryTerritoryExists</label>
        </rules>
    </decisions>
    <decisions>
        <name>DoesStateTerritoryRecordExist</name>
        <label>DoesStateTerritoryRecordExist?</label>
        <locationX>776</locationX>
        <locationY>1031</locationY>
        <defaultConnector>
            <targetReference>GetCountryTerritory</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>StateExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_State_Territory.StateProvince__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.State</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_State_Territory.StateProvince__c</leftValueReference>
                <operator>NotEqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>Get_State_Territory.Zip_Code__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>Get_State_Territory.City__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AssignStateOwner</targetReference>
            </connector>
            <label>StateExists</label>
        </rules>
    </decisions>
    <decisions>
        <name>DoesZipCodeExist</name>
        <label>DoesZipCodeExist?</label>
        <locationX>1089</locationX>
        <locationY>551</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>RecordDoesNotExist</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_ZipCode_Territory.Id</leftValueReference>
                <operator>EqualTo</operator>
            </conditions>
            <connector>
                <targetReference>GetCityTerritory</targetReference>
            </connector>
            <label>RecordDoesNotExist</label>
        </rules>
        <rules>
            <name>RecordExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_ZipCode_Territory.Id</leftValueReference>
                <operator>NotEqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>Get_ZipCode_Territory.Zip_Code__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.PostalCode</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AssignOwner</targetReference>
            </connector>
            <label>RecordExists</label>
        </rules>
    </decisions>
    <description>Leads assigned via zip,city,state,country</description>
    <environments>Default</environments>
    <formulas>
        <name>ZipCode</name>
        <dataType>Number</dataType>
        <expression>VALUE({!$Record.PostalCode})</expression>
        <scale>2</scale>
    </formulas>
    <interviewLabel>Territory Lead Assignment {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Territory Lead Assignment Zip,City,State,Country</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>Get_State_Territory</name>
        <label>Get State Territory</label>
        <locationX>776</locationX>
        <locationY>911</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesStateTerritoryRecordExist</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>StateProvince__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.State</elementReference>
            </value>
        </filters>
        <filters>
            <field>Zip_Code__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>City__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>StateProvince__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Territory__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_ZipCode_Territory</name>
        <label>Get ZipCode Territory</label>
        <locationX>1089</locationX>
        <locationY>431</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesZipCodeExist</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Zip_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.PostalCode</elementReference>
            </value>
        </filters>
        <filters>
            <field>Zip_Code__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Territory__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCityTerritory</name>
        <label>GetCityTerritory</label>
        <locationX>545</locationX>
        <locationY>671</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesCityTerritoryExist</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>City__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.City</elementReference>
            </value>
        </filters>
        <filters>
            <field>Zip_Code__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>City__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Territory__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCountryTerritory</name>
        <label>GetCountryTerritory</label>
        <locationX>974</locationX>
        <locationY>1151</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>DoesCountryTerritoryExist</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Country__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Country</elementReference>
            </value>
        </filters>
        <filters>
            <field>StateProvince__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Zip_Code__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>City__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Country__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Territory__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getUser</name>
        <label>getUser</label>
        <locationX>50</locationX>
        <locationY>431</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>updateLeadOwner</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Anne Adams</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>AssignCityOwner</name>
        <label>AssignCityOwner</label>
        <locationX>314</locationX>
        <locationY>911</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>GetCityTerritory.OwnerId</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>AssignCountryOwner</name>
        <label>AssignCountryOwner</label>
        <locationX>842</locationX>
        <locationY>1391</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>GetCountryTerritory.OwnerId</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>AssignOwner</name>
        <label>AssignOwner</label>
        <locationX>1370</locationX>
        <locationY>671</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>Get_ZipCode_Territory.OwnerId</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>AssignStateOwner</name>
        <label>AssignStateOwner</label>
        <locationX>578</locationX>
        <locationY>1151</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>Get_State_Territory.OwnerId</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>AssignToDylan</name>
        <label>AssignToDylan</label>
        <locationX>1106</locationX>
        <locationY>1391</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <stringValue>0058b00000GcVfnAAF</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Reroute__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>updateLeadOwner</name>
        <label>updateLeadOwner</label>
        <locationX>50</locationX>
        <locationY>551</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>getUser.Id</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <start>
        <locationX>443</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>CheckSecondaryLeadSource</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Reroute__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>OverRideTerritory__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>LeadSource</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>Cold Call</stringValue>
            </value>
        </filters>
        <object>Lead</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordBeforeSave</triggerType>
    </start>
    <status>Obsolete</status>
</Flow>
